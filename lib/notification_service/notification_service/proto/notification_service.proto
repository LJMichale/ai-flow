/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
option java_generic_services = true;
option java_package = "com.aiflow.notification.proto";
option py_generic_services = true;
package notification_service;

service NotificationService {
    // AirFlowService provides notification function rest endpoint of NotificationService for Notification Service component.
    // Functions of NotificationService include:
    //  1.Send event.
    //  2.List events.

    // Send event.
    rpc sendEvent (SendEventRequest) returns (SendEventsResponse) {
    }

    // List events.
    rpc listEvents (ListEventsRequest) returns (ListEventsResponse) {
    }

    // List all events from the start time.
    rpc listAllEvents (ListAllEventsRequest) returns (ListEventsResponse) {
    }

    // List all events from the id.
    rpc listEventsFromId (ListEventsFromIdRequest) returns (ListEventsResponse) {
    }

    // Get latest version by key
    rpc getLatestVersionByKey (GetLatestVersionByKeyRequest) returns (GetLatestVersionResponse) {
    }
}

message EventProto {
    string key = 1;
    string value = 2;
    string event_type = 3;
    int32 version = 4;
    int64 create_time = 5;
    int64 id = 6;
}


message SendEventRequest {
    EventProto event = 1;
}

message SendEventsResponse {
    string return_code = 1;
    string return_msg = 2;
    EventProto event = 3;
}

message ListEventsRequest {
    EventProto event = 1;
    int32 timeout_seconds = 2;
}

message ListAllEventsRequest {
    int64 start_time = 1;
    int32 timeout_seconds = 2;
}

message ListEventsFromIdRequest {
    int64 id = 1;
    int32 timeout_seconds = 2;
}

message ListEventsResponse {
    string return_code = 1;
    string return_msg = 2;
    repeated EventProto events = 3;
}

message GetLatestVersionByKeyRequest {
    string key = 1;
    int32 timeout_seconds = 2;
}

message GetLatestVersionResponse {
    string return_code = 1;
    string return_msg = 2;
    int64 version = 3;
}

enum ReturnStatus {
    SUCCESS = 0;
    ERROR = 1;
}
